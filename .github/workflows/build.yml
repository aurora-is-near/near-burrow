name: Build
on:
  pull_request:
  workflow_dispatch:

env:
  RELEASE_BIN: near-burrow
  RELEASE_DIR: artifacts
  GITHUB_REF: "${{ github.ref }}"
  RELEASE_ADDS: README.md

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   rust: stable
          - target: x86_64-apple-darwin
            os: macos-latest
            rust: stable
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   rust: stable

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: wasm32-unknown-unknown

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo "version=${GITHUB_REF:10}" >> $GITHUB_OUTPUT

      # - name: Install C compilation tooling (Linux)
      #   if: matrix.os == 'ubuntu-latest'
      #   run: |
      #     sudo apt-get update -y
      #     sudo apt-get install clang gcc-aarch64-linux-gnu libssl-dev musl-tools -y
      #     echo "TARGET_CC=clang" >> $GITHUB_ENV
      #     echo "CFLAGS_aarch64_unknown_linux_musl=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
      #     echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=/usr/aarch64-linux-gnu/bin/ld" >> $GITHUB_ENV

      - name: Install p7zip (MacOS)
        if: matrix.os == 'macos-latest'
        run: brew install p7zip

      - name: Add rustup target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      # - name: Set RUSTFLAGS (Windows)
      #   if: matrix.os == 'windows-latest'
      #   run: echo "RUSTFLAGS=-Ctarget-feature=+crt-static" >> $GITHUB_ENV

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir -p ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}

      - name: Move binaries (Linux/MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          mv ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}/${{ env.RELEASE_BIN }}
          mv ${{ env.RELEASE_ADDS }} ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}

      # - name: Move binaries (Windows)
      #   if: matrix.os == 'windows-latest'
      #   shell: bash
      #   run: |
      #     cp ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }}.exe ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}/${{ env.RELEASE_BIN }}.exe
      #     cp ./target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }}.exe wasm-pack-init.exe
      #     mv ${{ env.RELEASE_ADDS }} ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}
      #     mv wasm-pack-init.exe ${{ env.RELEASE_DIR }}

      - name: Create tarball
        shell: bash
        run: 7z a -ttar -so -an ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }} | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target }}
          path: ./${{ env.RELEASE_DIR }}

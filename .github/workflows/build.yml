name: Build
on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        include:
          - build: stable-x64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          # TODO: figure out cross-compilation
          # - build: linux
          #   os: ubuntu-latest
          #   rust: nightly
          #   target: x86_64-unknown-linux-musl
          # - build: stable-aarch64
          #   os: ubuntu-latest
          #   rust: stable
          #   target: aarch64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   rust: stable

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      # - name: Install C compilation tooling (Linux)
      #   if: matrix.os == 'ubuntu-latest'
      #   shell: bash
      #   run: |
      #     sudo apt-get update -y
      #     sudo apt-get install musl-tools -y

      # - name: Use Cross
      #   if: matrix.os == 'ubuntu-latest' && matrix.target != ''
      #   shell: bash
      #   run: |
      #     # In the past, new releases of 'cross' have broken CI. So for now, we
      #     # pin it. We also use their pre-compiled binary releases because cross
      #     # has over 100 dependencies and takes a bit to compile.
      #     dir="$RUNNER_TEMP/cross-download"
      #     mkdir "$dir"
      #     echo "$dir" >> $GITHUB_PATH
      #     cd "$dir"
      #     curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
      #     tar xf cross-x86_64-unknown-linux-musl.tar.gz
      #     echo "CARGO=cross" >> $GITHUB_ENV

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        shell: bash
        run: |
          ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            bin="target/${{ matrix.target }}/release/near-burrow.exe"
          else
            bin="target/${{ matrix.target }}/release/near-burrow"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Determine archive name
        shell: bash
        run: |
          echo "ARCHIVE=near-burrow-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,LICENSE} "$ARCHIVE"/

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV

      - name: Upload Zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ./${{ env.ASSET }}
